----------------Prevent Circular Reference Errors in Json-----------------------------------------

In this configuration, the ASP.NET Core application is set up to use **Newtonsoft.Json** instead of the default `System.Text.Json` serializer. 
This is done by adding the following line in the `Program.cs` file:

\\\csharp
builder.Services.AddControllers()
    .AddNewtonsoftJson(options =>
    {
        options.SerializerSettings.ReferenceLoopHandling = ReferenceLoopHandling.Ignore;
    });
----

This setup serves two main purposes:

1. **Enable Newtonsoft.Json Integration:**
   By calling `.AddNewtonsoftJson()`, the application switches its JSON handling engine from `System.Text.Json` to `Newtonsoft.Json`.
This is useful when you need advanced serialization features like custom converters, flexible property naming, or compatibility with older code that uses Newtonsoft attributes such as `[JsonProperty]`, `[JsonIgnore]`, or `[JsonConverter]`.

2. **Prevent Circular Reference Errors:**
   The line `options.SerializerSettings.ReferenceLoopHandling = ReferenceLoopHandling.Ignore;` solves one of the most common issues in APIs ‚Äî circular reference loops.
   For example, when working with Entity Framework models that have bidirectional relationships (like `Parent ‚Üí Child ‚Üí Parent`), JSON serialization can enter an infinite loop and cause runtime errors.
   By setting `ReferenceLoopHandling` to `Ignore`, Newtonsoft.Json simply skips over repeated references, ensuring smooth and safe serialization without breaking your API responses.

In short, this configuration improves API stability and flexibility by using a robust JSON serializer and eliminating circular reference serialization issues often encountered in complex object graphs.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--------------------------------Data Validation and ModelState----------------------------------------------
In **ASP.NET Core**, model validation is not automatically enforced unless you enable it through the `[ApiController]` attribute. Here‚Äôs how it works:

---

### üß© How Model Validation Works
When an HTTP request reaches your controller:

1. ASP.NET Core automatically performs **model binding** and **data annotation validation** (e.g., `[Required]`, `[Range]`, `[MaxLength]`).
2. The results of that validation are stored in the `ModelState` object.
3. It‚Äôs your responsibility to decide whether to proceed or stop execution based on `ModelState.IsValid`.

Example:
```csharp
[HttpPost]
public IActionResult CreateUser(UserDto model)
{
    if (!ModelState.IsValid)
        return BadRequest(ModelState);

    _dbContext.Users.Add(_mapper.Map<User>(model));
    _dbContext.SaveChanges();
    return Ok();
}
```
If you skip this check, invalid data can reach your database and cause runtime or integrity issues.
---
### ‚öôÔ∏è Automatic Validation with `[ApiController]`
When you decorate your controller with the `[ApiController]` attribute, ASP.NET Core automatically validates incoming models for you.

```csharp
[ApiController]
[Route("api/[controller]")]
public class UsersController : ControllerBase
{
    [HttpPost]
    public IActionResult Create(UserDto model)
    {
        // No need to check ModelState manually
        // Invalid models automatically return 400 Bad Request
        return Ok();
    }
}
```
In this mode:
* The framework automatically returns a **400 Bad Request** if the model is invalid.
* The response includes a `ProblemDetails` object describing validation errors.
* You don‚Äôt need to write `if (!ModelState.IsValid)`.

---
### ‚úÖ Summary

| Controller Type           | Automatic Model Validation     | Manual Check Required                      |
| ------------------------- | ------------------------------ | ------------------------------------------ |
| With `[ApiController]`    | ‚úÖ Yes (automatic 400 response) | ‚ùå Not required                             |
| Without `[ApiController]` | ‚ùå No                           | ‚úÖ Must check `ModelState.IsValid` manually |

---
**In short:**
* ASP.NET Core *always* performs validation,
* But *only* `[ApiController]` automatically stops execution when validation fails.
* Otherwise, you must manually check `ModelState.IsValid` before proceeding.
